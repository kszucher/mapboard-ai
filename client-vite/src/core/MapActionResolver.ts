import {isUrl} from "./Utils"
import {M} from "../state/MapPropTypes"
import {getX, isXACC, isXACR, isXC, isXDS, isXR, isXS, isXASVN, isXCR, isXCL, isXCB, isXCT, sortPath, getCountXASU, getCountXASD, getCountCO1, getCountSO1, getPathDir, getXP, isR, getCountRXD1S, getCountRXD0S, getXRi, getRXD0, getRXD1} from "./MapUtils"

const ckm = (e: any, condition: string) => [+e.ctrlKey ? 'c' : '-', +e.shiftKey ? 's' : '-', +e.altKey ? 'a' : '-'].join('') === condition

export const mapActionResolver = (pm: M, e: any, es: string, et: string | null, ep: any) => {
  const m = structuredClone(pm).sort(sortPath)
  const dr = getPathDir(getXP(m)) === 1
  const dl = getPathDir(getXP(m)) === -1
  const editable = (isXR(m) || isXS(m) || isXC(m)) && getX(m).contentType !== 'image' && getCountCO1(m, getXP(m)) === 0

  switch (true) {
    case (es === 'kd' && ckm(e, '---') && e.key === 'F1'): return ({type: '', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.key === 'F2' && editable): return ({type: 'startEditAppend', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.key === 'F3'): return ({type: '', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.key === 'F5'): return ({type: '', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.key === 'Enter' && isXS(m)): return ({type: 'insertSD', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.key === 'Enter' && isXC(m)): return ({type: 'selectCD', payload: ep})
    case (es === 'kd' && ckm(e, '-s-') && e.key === 'Enter' && isXS(m)): return ({type: 'insertSU', payload: ep})
    case (es === 'kd' && ckm(e, '--a') && e.key === 'Enter' && isXS(m)): return ({type: 'cellify', payload: ep})
    case (es === 'kd' && ckm(e, '---') && ['Insert','Tab'].includes(e.key) && isXR(m)): return ({type: 'insertSOR', payload: ep})
    case (es === 'kd' && ckm(e, '---') && ['Insert','Tab'].includes(e.key) && isXS(m)): return ({type: 'insertSO', payload: ep})
    case (es === 'kd' && ckm(e, '---') && ['Insert','Tab'].includes(e.key) && isXC(m)): return ({type: 'selectCO', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.key === 'Delete' && isXS(m)): return ({type: 'deleteS', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.key === 'Delete' && isXACR(m)): return ({type: 'deleteCR', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.key === 'Delete' && isXACC(m)): return ({type: 'deleteCC', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'Space' && isXS(m) && getCountCO1(m, getXP(m)) > 0): return ({type: 'selectCFF', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'Space' && isXC(m) && getCountSO1(m, getXP(m)) > 0): return ({type: 'selectSF', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'Space' && isXC(m) && !(getCountSO1(m, getXP(m)) > 0)): return ({type: 'insertSO', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'Space' && isXACR(m)): return ({type: 'selectCFfirstCol', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'Space' && isXACC(m)): return ({type: 'selectCFfirstRow', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'Backspace' && isXS(m) && getXP(m).includes('c')): return ({type: 'selectCB', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'Backspace' && (isXC(m) || isXACR(m) || isXACC(m))): return ({type: 'selectSB', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'Escape'): return ({type: 'selectR', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'KeyA'): return ({type: 'selectall', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'KeyM'): return ({type: 'createMapInMapDialog', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'KeyC' && isXASVN(m)): return ({type: 'copyS', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'KeyX' && isXASVN(m)): return ({type: 'cutS', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'KeyZ'): return ({type: 'redo',payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'KeyY'): return ({type: 'undo',payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'KeyE' && isXS(m)): return ({type: 'transpose', payload: ep})

    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowDown' && isXS(m)): return ({type: 'selectSD', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowDown' && isXC(m) && !isXCB(m)): return ({type: 'selectCD', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowDown' && isXACR(m) && !isXCB(m)): return ({type: 'selectCRD', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'ArrowDown' && isXASVN(m) && !(getCountXASD(m) > 0)): return ({type: 'moveST', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'ArrowDown' && isXASVN(m) && getCountXASD(m) > 0): return ({type: 'moveSD', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'ArrowDown' && isXACR(m) && !isXCB(m)): return ({type: 'moveCRD', payload: ep})
    case (es === 'kd' && ckm(e, '-s-') && e.code === 'ArrowDown' && isXS(m)): return ({type: 'selectSDtoo', payload: ep})
    case (es === 'kd' && ckm(e, '-s-') && e.code === 'ArrowDown' && isXC(m)): return ({type: 'selectCCSAME', payload: ep})
    case (es === 'kd' && ckm(e, '--a') && e.code === 'ArrowDown' && isXACR(m)): return ({type: 'insertCRD', payload: ep})

    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowUp' && isXS(m)): return ({type: 'selectSU', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowUp' && isXC(m) && !isXCT(m)): return ({type: 'selectCU', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowUp' && isXACR(m) && !isXCT(m)): return ({type: 'selectCRU', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'ArrowUp' && isXASVN(m) && !(getCountXASU(m) > 0)): return ({type: 'moveSB', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'ArrowUp' && isXASVN(m) && getCountXASU(m) > 0): return ({type: 'moveSU', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'ArrowUp' && isXACR(m) && !isXCT(m)): return ({type: 'moveCRU', payload: ep})
    case (es === 'kd' && ckm(e, '-s-') && e.code === 'ArrowUp' && isXS(m)): return ({type: 'selectSUtoo', payload: ep})
    case (es === 'kd' && ckm(e, '-s-') && e.code === 'ArrowUp' && isXC(m)): return ({type: 'selectCCSAME', payload: ep})
    case (es === 'kd' && ckm(e, '--a') && e.code === 'ArrowUp' && isXACR(m)): return ({type: 'insertCRU', payload: ep})

    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowRight' && isXR(m) && getCountRXD0S(m, getXRi(m)) > 0): return ({type: 'selectSOR', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowRight' && dr && isXS(m)): return ({type: 'selectSO', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowRight' && dl && isXDS(m)): return ({type: 'selectR', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowRight' && dl && isXS(m)): return ({type: 'selectSI', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowRight' && dr && isXC(m) && !isXCR(m)): return ({type: 'selectCR', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowRight' && dr && isXACC(m) && !isXCR(m)): return ({type: 'selectCCR', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowRight' && dl && isXC(m) && !isXCL(m)): return ({type: 'selectCL', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowRight' && dl && isXACC(m) && !isXCL(m)): return ({type: 'selectCCL', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'ArrowRight' && dr && isXASVN(m) && getCountXASU(m) > 0): return ({type: 'moveSO', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'ArrowRight' && dl && isXASVN(m) && !isXDS(m)): return ({type: 'moveSI', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'ArrowRight' && dl && isXASVN(m) && isXDS(m)): return ({type: 'moveSIL', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'ArrowRight' && dr && isXACC(m) && !isXCR(m)): return ({type: 'moveCCR', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'ArrowRight' && dl && isXACC(m) && !isXCL(m)): return ({type: 'moveCCL', payload: ep})
    case (es === 'kd' && ckm(e, '-s-') && e.code === 'ArrowRight' && isXR(m)): return ({type: 'selectSfamilyOR', payload: ep})
    case (es === 'kd' && ckm(e, '-s-') && e.code === 'ArrowRight' && dr && isXS(m) && getCountSO1(m, getXP(m)) > 0): return ({type: 'selectSfamilyO', payload: ep})
    case (es === 'kd' && ckm(e, '-s-') && e.code === 'ArrowRight' && isXC(m)): return ({type: 'selectCRSAME', payload: ep})
    case (es === 'kd' && ckm(e, '--a') && e.code === 'ArrowRight' && dr && isXACC(m)): return ({type: 'insertCCR', payload: ep})
    case (es === 'kd' && ckm(e, '--a') && e.code === 'ArrowRight' && dl && isXACC(m)): return ({type: 'insertCCL', payload: ep})

    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowLeft' && isXR(m) && getCountRXD1S(m, getXRi(m)) > 0): return ({type: 'selectSOL', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowLeft' && dr && isXDS(m)): return ({type: 'selectR', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowLeft' && dr && isXS(m)): return ({type: 'selectSI', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowLeft' && dl && isXS(m)): return ({type: 'selectSO', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowLeft' && dr && isXC(m) && !isXCL(m)): return ({type: 'selectCL', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowLeft' && dr && isXACC(m) && !isXCL(m)): return ({type: 'selectCCL', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowLeft' && dl && isXC(m) && !isXCR(m)): return ({type: 'selectCR', payload: ep})
    case (es === 'kd' && ckm(e, '---') && e.code === 'ArrowLeft' && dl && isXACC(m) && !isXCR(m)): return ({type: 'selectCCR', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'ArrowLeft' && dr && isXASVN(m) && !isXDS(m)): return ({type: 'moveSI', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'ArrowLeft' && dr && isXASVN(m) && isXDS(m)): return ({type: 'moveSIR', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'ArrowLeft' && dl && isXASVN(m) && getCountXASU(m) > 0): return ({type: 'moveSO', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'ArrowLeft' && dr && isXACC(m) && !isXCL(m)): return ({type: 'moveCCL', payload: ep})
    case (es === 'kd' && ckm(e, 'c--') && e.code === 'ArrowLeft' && dl && isXACC(m) && !isXCR(m)): return ({type: 'moveCCR', payload: ep})
    case (es === 'kd' && ckm(e, '-s-') && e.code === 'ArrowLeft' && isXR(m)): return ({type: 'selectSfamilyOL', payload: ep})
    case (es === 'kd' && ckm(e, '-s-') && e.code === 'ArrowLeft' && dl && isXS(m) && getCountSO1(m, getXP(m)) > 0): return ({type: 'selectSfamilyO', payload: ep})
    case (es === 'kd' && ckm(e, '-s-') && e.code === 'ArrowLeft' && isXC(m)): return ({type: 'selectCRSAME', payload: ep})
    case (es === 'kd' && ckm(e, '--a') && e.code === 'ArrowLeft' && dr && isXACC(m)): return ({type: 'insertCCL', payload: ep})
    case (es === 'kd' && ckm(e, '--a') && e.code === 'ArrowLeft' && dl && isXACC(m)): return ({type: 'insertCCR', payload: ep})

    case (es === 'kd' && ckm(e, 'c--') && e.which >= 96 && e.which <= 105 && isXS(m)): return ({type: 'applyColorFromKey', payload: {currColor: e.which - 96}})
    case (es === 'kd' && ckm(e, '---') && e.which >= 48 && editable): return ({type: 'startEditReplace', payload: ep})
    case (es === 'kd' && ckm(e, '-s-') && e.which >= 48 && editable): return ({type: 'startEditReplace', payload: ep})

    case (es === 'pt' && ep.substring(0, 1) === '[' && isXR(m)): return ({type: 'pasteSOR', payload: ep})
    case (es === 'pt' && ep.substring(0, 1) === '[' && isXS(m)): return ({type: 'pasteSO', payload: ep})
    case (es === 'pt' && ep.substring(0, 2) === '\\[' && isXR(m)): return ({type: 'insertSOREquation', payload: ep})
    case (es === 'pt' && ep.substring(0, 2) === '\\[' && isXS(m)): return ({type: 'insertSOEquation', payload: ep})
    case (es === 'pt' && isUrl(ep) && isXR(m)): return ({type: 'insertSORLink', payload: ep})
    case (es === 'pt' && isUrl(ep) && isXS(m)): return ({type: 'insertSOLink', payload: ep})
    case (es === 'pt' && isXR(m)): return ({type: 'insertSORText', payload: ep})
    case (es === 'pt' && isXS(m)): return ({type: 'insertSOText', payload: ep})

    case (es === 'pi' && isXR(m)): return ({type: 'insertSORImage', payload: ep})
    case (es === 'pi' && isXS(m)): return ({type: 'insertSOImage', payload: ep})

    case (es === 'c' && et === 'select' && isR(ep.path)): return ({type: 'selectR', payload: ep})
    case (es === 'c' && et === 'select' && !isR(ep.path) && !ep.add): return ({type: 'selectS', payload: ep})
    case (es === 'c' && et === 'select' && !isR(ep.path) && ep.add): return ({type: 'selectStoo', payload: ep})
    case (es === 'c' && et === 'selectF' && isR(ep.path) && getCountRXD0S(m, getXRi(m)) > 0 && !getRXD0(m).selected): return ({type: 'selectRXD0F', payload: ep})
    case (es === 'c' && et === 'selectF' && isR(ep.path) && !!getRXD0(m).selected && !getRXD1(m).selected && getCountSO1(m, getRXD1(m).path) > 0): return ({type: 'selectRXD1F', payload: ep})
    case (es === 'c' && et === 'selectF' && !isR(ep.path) && getCountSO1(m, ep.path) > 0): return ({type: 'selectF', payload: ep})
    case (es === 'c' && et === 'selectR'): return ({type: 'selectR', payload: ep})
    case (es === 'c' && et === 'selectDragged'): return ({type: 'selectDragged', payload: ep})

    case (es === 'c' && et === 'insert' && isXR(m)): return ({type: 'insertSOR', payload: ep})
    case (es === 'c' && et === 'insert' && isXS(m)): return ({type: 'insertSO', payload: ep})
    case (es === 'c' && et === 'insertS' && isXR(m)): return ({type: 'insertSOR', payload: ep})
    case (es === 'c' && et === 'insertS' && isXS(m)): return ({type: 'insertSO', payload: ep})
    case (es === 'c' && et === 'insertSCSO'): return ({type: 'insertSCSO', payload: ep})
    case (es === 'c' && et === 'insertSCRD' && isXS(m) && getCountCO1(m, getXP(m)) > 0): return ({type: 'insertSCRD', payload: ep})
    case (es === 'c' && et === 'insertSCRU' && isXS(m) && getCountCO1(m, getXP(m)) > 0): return ({type: 'insertSCRU', payload: ep})
    case (es === 'c' && et === 'insertSCCR' && isXS(m) && getCountCO1(m, getXP(m)) > 0): return ({type: 'insertSCCR', payload: ep})
    case (es === 'c' && et === 'insertSCCL' && isXS(m) && getCountCO1(m, getXP(m)) > 0): return ({type: 'insertSCCL', payload: ep})
    case (es === 'c' && et === 'insertTable' && isXR(m)): return ({type: 'insertSORTable', payload: ep})
    case (es === 'c' && et === 'insertTable' && isXS(m)): return ({type: 'insertSOTable', payload: ep})

    case (es === 'c' && et === 'finishEdit'): return ({type: 'finishEdit', payload: ep})
    case (es === 'c' && et === 'simulateDrag'): return ({type: 'simulateDrag', payload: ep})
    case (es === 'c' && et === 'drag'): return ({type: 'drag', payload: ep})
    case (es === 'c' && et === 'startEditAppend' && editable): return ({type: 'startEditAppend', payload: ep})
    case (es === 'c' && et === 'typeText'): return ({type: 'typeText', payload: ep})
    case (es === 'c' && et === 'undo'): return ({type: 'undo',payload: ep})
    case (es === 'c' && et === 'redo'): return ({type: 'redo',payload: ep})
    case (es === 'c' && et === 'setTaskStatus'): return ({type: 'setTaskStatus', payload: ep})
    case (es === 'c' && et === 'setNote'): return ({type: 'setNote', payload: ep})
    case (es === 'c' && et === 'changeDensity'): return ({type: 'changeDensity', payload: ep})
    case (es === 'c' && et === 'changeAlignment'): return ({type: 'changeAlignment', payload: ep})
    case (es === 'c' && et === 'toggleTask'): return ({type: 'toggleTask', payload: ep})
    case (es === 'c' && et === 'moveS2T' && isXS(m) && getCountSO1(m, getXP(m)) > 0): return ({type: 'moveS2T', payload: ep})
    case (es === 'c' && et === 'insertMeetingTemplate'): return ({type: 'insertMeetingTemplate', payload: ep})

    case (es === 'a' && et === 'gptParser'): return ({type: 'gptParser', payload: ep})

    default: return ({type: '', payload: ep})
  }
}
