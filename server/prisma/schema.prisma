// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  sub          String
  signInCount  Int
  colorMode    ColorMode
  email        String
  name         String
  Maps         Map[]       @relation("Maps")
  tabId        Int         @unique
  Tab          Tab         @relation(fields: [tabId], references: [id])
  SharesByMe   Share[]     @relation("SharesByMe")
  SharesWithMe Share[]     @relation("SharesWithMe")
  Workspaces   Workspace[]
}

model Map {
  id        Int         @id @default(autoincrement())
  mapData   Json
  name      String
  openCount Int         @default(0)
  userId    Int
  User      User        @relation("Maps", fields: [userId], references: [id])
  Shares    Share[]     @relation("Shares")
  Workspace Workspace[]
}

model Tab {
  id     Int   @id @default(autoincrement())
  user   User?
  mapIds Int[]
}

model Share {
  id          Int         @id @default(autoincrement())
  ownerUserId Int
  OwnerUser   User        @relation("SharesByMe", fields: [ownerUserId], references: [id])
  shareUserId Int
  ShareUser   User        @relation("SharesWithMe", fields: [shareUserId], references: [id])
  mapId       Int
  Map         Map         @relation("Shares", fields: [mapId], references: [id])
  access      ShareAccess
  status      ShareStatus
}

model Workspace {
  id      Int  @id @default(autoincrement())
  userId  Int
  User    User @relation(fields: [userId], references: [id])
  mapId   Int
  Map     Map  @relation(fields: [mapId], references: [id])
  mapData Json
}

enum ColorMode {
  DARK
  LIGHT
}

enum ShareAccess {
  UNAUTHORIZED
  VIEW
  EDIT
}

enum ShareStatus {
  WAITING
  ACCEPTED
}

// for the first implementation I'll only work with generated types, and once that is done, I create the actual db
