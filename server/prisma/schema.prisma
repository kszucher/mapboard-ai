generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  sub          String      @unique
  signInCount  Int         @default(0)
  colorMode    ColorMode   @default(DARK)
  email        String      @unique
  name         String
  Maps         Map[]       @relation("Maps")
  Tab          Tab?        @relation("UserTab")
  SharesByMe   Share[]     @relation("SharesByMe")
  SharesWithMe Share[]     @relation("SharesWithMe")
  Workspaces   Workspace[]
}

model Map {
  id        Int         @id @default(autoincrement())
  data      Json
  name      String
  openCount Int         @default(0)
  userId    Int
  User      User        @relation("Maps", fields: [userId], references: [id])
  Shares    Share[]     @relation("Shares")
  Workspace Workspace[]
  updatedAt DateTime    @updatedAt
}

model Tab {
  id     Int   @id @default(autoincrement())
  userId Int   @unique
  User   User  @relation("UserTab", fields: [userId], references: [id])
  mapIds Int[]
}

model Share {
  id          Int         @id @default(autoincrement())
  ownerUserId Int
  OwnerUser   User        @relation("SharesByMe", fields: [ownerUserId], references: [id])
  shareUserId Int
  ShareUser   User        @relation("SharesWithMe", fields: [shareUserId], references: [id])
  mapId       Int
  Map         Map         @relation("Shares", fields: [mapId], references: [id])
  access      ShareAccess
  status      ShareStatus
}

model Workspace {
  id     Int  @id @default(autoincrement())
  userId Int
  User   User @relation(fields: [userId], references: [id])
  mapId  Int?
  Map    Map? @relation(fields: [mapId], references: [id])
}

model Ingestion {
  id   Int  @id @default(autoincrement())
  data Json
}

enum ColorMode {
  DARK
  LIGHT
}

enum ShareStatus {
  WAITING
  ACCEPTED
}

enum ShareAccess {
  UNAUTHORIZED
  VIEW
  EDIT
}
