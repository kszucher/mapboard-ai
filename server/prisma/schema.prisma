generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  sub          String      @unique
  signInCount  Int         @default(0)
  colorMode    ColorMode   @default(DARK)
  email        String      @unique
  name         String
  Maps         Map[]       @relation("Maps")
  Tab          Tab?        @relation("UserTab")
  SharesByMe   Share[]     @relation("SharesByMe")
  SharesWithMe Share[]     @relation("SharesWithMe")
  Workspaces   Workspace[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
}

model Map {
  id         Int         @id @default(autoincrement())
  name       String
  openCount  Int         @default(0)
  userId     Int
  User       User        @relation("Maps", fields: [userId], references: [id])
  Shares     Share[]     @relation("Shares")
  Workspaces Workspace[]
  MapEdges   Edge[]
  MapNodes   Node[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
}

model Node {
  id                       Int              @id @default(autoincrement())
  mapId                    Int
  Map                      Map              @relation(fields: [mapId], references: [id])
  nodeTypeId               Int
  NodeType                 NodeType         @relation(fields: [nodeTypeId], references: [id])
  workspaceId              Int?
  iid                      Int
  offsetX                  Int
  offsetY                  Int
  isProcessing             Boolean          @default(false)
  fileHash                 String?
  fileName                 String?
  ingestionModel           String?
  ingestionOutputJson      Json?
  vectorDatabaseId         String?
  vectorDatabaseOutputText String?
  dataFrameOutputJson      Json?
  contextOutputText        String?
  questionOutputText       String?
  llmInstructions          String?
  llmOutputSchema          LlmOutputSchema?
  llmOutputJson            Json?
  visualizerOutputText     String?
  FromEdges                Edge[]           @relation("FromEdges")
  ToEdges                  Edge[]           @relation("ToEdges")
  NodeConfigs              NodeConfig[]
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @default(now()) @updatedAt
}

model NodeType {
  id                Int              @id @default(autoincrement())
  w                 Int
  h                 Int
  type              String           @unique
  color             Color
  label             String
  NodeConfigTypes   NodeConfigType[]
  MapEdgeConfigFrom EdgeType[]       @relation("FromEdgeConfigs")
  MapEdgeConfigTo   EdgeType[]       @relation("ToEdgeConfigs")
  Node              Node[]
}

model NodeConfig {
  id                Int     @id @default(autoincrement())
  mapNodeId         Int
  Node              Node    @relation(fields: [mapNodeId], references: [id])
  nodeFieldConfigId Int
  value             String?
}

model NodeConfigType {
  id            Int                 @id @default(autoincrement())
  type          NodeConfigTypeLabel
  label         String
  selectOptions String[]
  nodeTypeId    Int?
  NodeType      NodeType?           @relation(fields: [nodeTypeId], references: [id])
}

enum NodeConfigTypeLabel {
  TEXT
  SELECT
}

model Edge {
  id          Int      @id @default(autoincrement())
  mapId       Int
  Map         Map      @relation(fields: [mapId], references: [id])
  edgeTypeId  Int
  EdgeType    EdgeType @relation(fields: [edgeTypeId], references: [id])
  workspaceId Int?
  fromNodeId  Int
  FromNode    Node     @relation("FromEdges", fields: [fromNodeId], references: [id])
  toNodeId    Int
  ToNode      Node     @relation("ToEdges", fields: [toNodeId], references: [id])
  lineColor   String   @default("#bbbbbb")
  lineWidth   Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model EdgeType {
  id               Int      @id @default(autoincrement())
  fromNodeConfigId Int
  FromNodeConfig   NodeType @relation("FromEdgeConfigs", fields: [fromNodeConfigId], references: [id])
  toNodeConfigId   Int
  ToNodeConfig     NodeType @relation("ToEdgeConfigs", fields: [toNodeConfigId], references: [id])
  Edge             Edge[]
}

model Tab {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  User      User     @relation("UserTab", fields: [userId], references: [id])
  mapIds    Int[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Share {
  id          Int         @id @default(autoincrement())
  ownerUserId Int
  OwnerUser   User        @relation("SharesByMe", fields: [ownerUserId], references: [id])
  shareUserId Int
  ShareUser   User        @relation("SharesWithMe", fields: [shareUserId], references: [id])
  mapId       Int
  Map         Map         @relation("Shares", fields: [mapId], references: [id])
  access      ShareAccess
  status      ShareStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
}

model Workspace {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  mapId     Int?
  Map       Map?     @relation(fields: [mapId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum ColorMode {
  DARK
  LIGHT
}

enum ControlType {
  FILE
  INGESTION
  CONTEXT
  QUESTION
  VECTOR_DATABASE
  DATA_FRAME
  LLM
  VISUALIZER
}

enum ShareStatus {
  WAITING
  ACCEPTED
}

enum ShareAccess {
  VIEW
  EDIT
}

enum LlmOutputSchema {
  TEXT
  VECTOR_DATABASE_QUERY
  DATA_FRAME_QUERY
}

enum Color {
  gray
  gold
  bronze
  brown
  yellow
  amber
  orange
  tomato
  red
  ruby
  crimson
  pink
  plum
  purple
  violet
  iris
  indigo
  blue
  cyan
  teal
  jade
  green
  grass
  lime
  mint
  sky
}
