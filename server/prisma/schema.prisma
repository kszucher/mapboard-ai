generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  sub          String      @unique
  signInCount  Int         @default(0)
  colorMode    ColorMode   @default(DARK)
  email        String      @unique
  name         String
  Maps         Map[]       @relation("Maps")
  Tab          Tab?        @relation("UserTab")
  SharesByMe   Share[]     @relation("SharesByMe")
  SharesWithMe Share[]     @relation("SharesWithMe")
  Workspaces   Workspace[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
}

model Map {
  id         Int         @id @default(autoincrement())
  name       String
  openCount  Int         @default(0)
  userId     Int
  User       User        @relation("Maps", fields: [userId], references: [id])
  Shares     Share[]     @relation("Shares")
  Workspaces Workspace[]
  Edges      Edge[]
  Nodes      Node[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
}

model Node {
  id           Int         @id @default(autoincrement())
  mapId        Int
  Map          Map         @relation(fields: [mapId], references: [id])
  nodeTypeId   Int
  NodeType     NodeType    @relation(fields: [nodeTypeId], references: [id])
  workspaceId  Int?
  iid          Int
  offsetX      Int
  offsetY      Int
  isProcessing Boolean     @default(false)
  FromEdges    Edge[]      @relation("FromEdges")
  ToEdges      Edge[]      @relation("ToEdges")
  Attributes   Attribute[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
}

model NodeType {
  id             Int             @id @default(autoincrement())
  w              Int
  h              Int
  color          Color
  label          String
  AttributeTypes AttributeType[]
  OutEdgeTypes   EdgeType[]      @relation("OutEdgeTypes")
  InEdgeTypes    EdgeType[]      @relation("InEdgeTypes")
  Node           Node[]
}

model Attribute {
  id              Int           @id @default(autoincrement())
  nodeId          Int
  Node            Node          @relation(fields: [nodeId], references: [id])
  attributeTypeId Int
  AttributeType   AttributeType @relation(fields: [attributeTypeId], references: [id])
  value           String?
}

model AttributeType {
  id            Int                @id @default(autoincrement())
  type          AttributeTypeLabel
  label         String
  selectOptions String[]
  nodeTypeId    Int?
  NodeType      NodeType?          @relation(fields: [nodeTypeId], references: [id])
  Attribute     Attribute[]
}

enum AttributeTypeLabel {
  TEXT
  SELECT
}

model Edge {
  id          Int      @id @default(autoincrement())
  mapId       Int
  Map         Map      @relation(fields: [mapId], references: [id])
  edgeTypeId  Int
  EdgeType    EdgeType @relation(fields: [edgeTypeId], references: [id])
  workspaceId Int?
  fromNodeId  Int
  FromNode    Node     @relation("FromEdges", fields: [fromNodeId], references: [id])
  toNodeId    Int
  ToNode      Node     @relation("ToEdges", fields: [toNodeId], references: [id])
  lineColor   String   @default("#bbbbbb")
  lineWidth   Int      @default(1)
  schema      Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model EdgeType {
  id             Int      @id @default(autoincrement())
  fromNodeTypeId Int
  FromNodeType   NodeType @relation("OutEdgeTypes", fields: [fromNodeTypeId], references: [id])
  toNodeTypeId   Int
  ToNodeType     NodeType @relation("InEdgeTypes", fields: [toNodeTypeId], references: [id])
  Edge           Edge[]
}

model Tab {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  User      User     @relation("UserTab", fields: [userId], references: [id])
  mapIds    Int[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Share {
  id          Int         @id @default(autoincrement())
  ownerUserId Int
  OwnerUser   User        @relation("SharesByMe", fields: [ownerUserId], references: [id])
  shareUserId Int
  ShareUser   User        @relation("SharesWithMe", fields: [shareUserId], references: [id])
  mapId       Int
  Map         Map         @relation("Shares", fields: [mapId], references: [id])
  access      ShareAccess
  status      ShareStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
}

model Workspace {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  mapId     Int?
  Map       Map?     @relation(fields: [mapId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum ColorMode {
  DARK
  LIGHT
}

enum ControlType {
  FILE
  INGESTION
  CONTEXT
  QUESTION
  VECTOR_DATABASE
  DATA_FRAME
  LLM
  VISUALIZER
}

enum ShareStatus {
  WAITING
  ACCEPTED
}

enum ShareAccess {
  VIEW
  EDIT
}

enum LlmOutputSchema {
  TEXT
  VECTOR_DATABASE_QUERY
  DATA_FRAME_QUERY
}

enum Color {
  gray
  gold
  bronze
  brown
  yellow
  amber
  orange
  tomato
  red
  ruby
  crimson
  pink
  plum
  purple
  violet
  iris
  indigo
  blue
  cyan
  teal
  jade
  green
  grass
  lime
  mint
  sky
}
